delimiter $$
drop procedure if exists pro_get_cut_info;
create procedure pro_get_cut_info(in id int)
begin 

select ci.res_u_name customer_name,ci.product_name,max(ci.price) price,ifnull(cld.cut_money,0) cut_money,ifnull(cut_count,0) cutCount,(activity_duration * 24 - TIMESTAMPDIFF(hour,ci.create_time,now())) remaind_hour,ci.product_img
    from t_cut_info ci 
    left join (select cut_id,count(1) cut_count,sum(cut_money) cut_money from t_cutlist_detail group by cut_id) cld
    on ci.id = cld.cut_id
    where ci.id = id and id is not null
    group by ci.req_u_id,ci.res_u_name,ci.product_name;

end; $$
delimiter ;



delimiter $$
drop procedure if exists pro_ready_help_cut;
create procedure pro_ready_help_cut(in cutId int,in openId varchar(100),in cutMoney int,in nickname varchar(60),in sex tinyint,in headimgurl varchar(100))
begin 

insert into t_cutlist_detail(cut_id,open_id,cut_money,nickname,sex,headimgurl) 
select cutId,openId,cutMoney,nickname,sex,headimgurl
from dual
where not exists(
select open_id from t_cutlist_detail where open_id = openId
) and openId is not null;

end; $$
delimiter ;


/**��һ��**/
delimiter $$
drop procedure if exists pro_help_cut;
create procedure pro_help_cut(in cutId int,in openId varchar(100),in cutMoney int)
begin 

start transaction;
set @alreadyCut = (select count(1) from t_cutlist_detail cld where cld.cut_id = cutId and cld.open_id = openId);
update t_cutlist_detail set cut_money = cutMoney 
where cut_id = cutId and open_id = openId and cut_money = 0;
select @alreadyCut alreadyCut ;
commit;

end; $$
delimiter ;


/**�����б�**/
delimiter $$
drop procedure if exists pro_get_cut_list;
create procedure pro_get_cut_list(in openId varchar(100))
begin 

start transaction;
select c.id cut_id,c.res_u_name customerName,c.product_name,c.price,c.status,product_img,date_format(c.create_time,'%Y-%m-%d %h:%m:%s') create_time,ifnull(cld.cut_money,0) cut_money,u.room_id
from t_cut_info c 
join user u 
on c.req_u_id = u.id 
left join (select cut_id,ifnull(sum(cut_money),0) cut_money from t_cutlist_detail group by cut_id)cld
on cld.cut_id = c.id
where u.open_id = openId;
commit;

end; $$



delimiter ;

/**�½�������Ϣ**/
delimiter $$
drop procedure if exists pro_create_cut_info;
create procedure pro_create_cut_info(in openId varchar(100),in username varchar(60),in product_name varchar(60),in price decimal(8,1),in create_time datetime,in product_img varchar(100),in activity_duration int)
begin 

start transaction;

insert into t_cut_info(req_u_id,res_u_name,product_name,price,create_time,product_img,activity_duration) 
select (select id from user where open_id = openId),username,product_name,price,create_time,product_img,activity_duration;
select LAST_INSERT_ID() cut_id;

commit;

end; $$
delimiter ;


/**��ע����Ϣ��**/
create table t_follow(id int auto_increment,open_id varchar(200),create_time datetime,status tinyint, primary key(id));

/**��ӹ�ע��**/
delimiter $$
drop procedure if exists pro_follow;
create procedure pro_follow(in openId varchar(200),in create_time datetime,in status tinyint)
begin 

insert into t_follow(open_id,create_time,status)
    select openId,create_time,status from dual
    where (select count(1) from t_follow where open_id = openId) = 0
    ;

end;$$
delimiter ;

/**ԭ��Ʒ�ӵ�**/
delimiter $$
drop procedure if exists pro_add_order_by_seller;
create procedure pro_add_order_by_seller(in cnickname varchar(50),in product_name varchar(40),in text varchar(600),in image_urls varchar(200),in sell_open_id varchar(200),in remark varchar(60),in productid int
,in in_quantity int,in cost int,in price int)
begin

start transaction;

set @now = now();
set @pname = product_name;
set @sell_room_id = (select room_id from user where open_id = sell_open_id);
set @openId = (select distinct open_id from t_weix_account_info where nickname = cnickname);-- 第一步、1先根据昵称获取买家openId
if @openId is null then
set @openId = (select distinct c_openid from t_customer where c_nickname = cnickname);-- 第一步、2根据昵称从熟客获取买家openId
end if;
if @openId is null then -- add customer hasn't follow daidai
set @openId = (select concat('lopid_',unix_timestamp(@now),cast(rand() as char(10))));
insert into t_customer(c_openid,seller_room_id,c_nickname,create_time)
    select @openId,@sell_room_id,cnickname,@now;
end if;

if productid = -1 then
set @productId = (select max(id) from product where title = @pname and room_id = @sell_room_id and status = 1);
-- SELECT @roomid;
else
set @productId = productid;
end if;

if @productId is null then
insert into product(image_url,text,room_id,create_time,status,title) values(image_urls,text,@sell_room_id,@now,1,@pname);-- 第二步、发布商品
set @productId = (select last_insert_id());
call pro_take_order_by_seller(@openId,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,@oid);-- 第三步、下单
else
call pro_take_order_by_seller(@openId,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,@oid);-- 第三步、下单
end if;

select @productId product_id,@oid order_id,c.id c_id
from t_customer c
where c.c_nickname = cnickname and c.seller_room_id = @sell_room_id;

commit;

end; $$
delimiter ;

/******
*********通过账单确认补全未关注的买家信息***************/

delimiter $$
drop procedure if exists pro_integrate_customer_info;
create procedure pro_integrate_customer_info(in cnickname varchar(50),in roomid varchar(40),in c_open_id varchar(200),
in headimgurl varchar(150),in sex bit,in nickname varchar(50),in city varchar(30),in country varchar(30),in unionid varchar(200),in subscribe_time datetime)
begin

start transaction;

set @now = now();
set @isSubscribed = (select count(1) from t_weix_account_info w
                         where w.open_id = c_open_id);
set @isBind = (select count(1) from t_customer c
    join user u
    on u.room_id = c.seller_room_id and c.c_nickname = cnickname and c.seller_room_id = roomid
    join t_weix_account_info w
    on w.open_id = c.c_openid);

if @isBind = 0 and @isSubscribed >= 1 then
    update t_customer set c_openid =  c_open_id where c_nickname = cnickname and seller_room_id = roomid;
elseif @isBind = 0 and @isSubscribed = 0 then
    call pro_weix_account_info(c_open_id,nickname,headimgurl,sex,city,country,unionid,@now);
    update t_customer set c_openid =  c_open_id where c_nickname = cnickname and seller_room_id = roomid;
end if;

commit;

end; $$
delimiter ;

-- 下单 pro_take_order
delimiter $$
drop procedure if exists pro_take_order;
CREATE  PROCEDURE pro_take_order(in c_open_id varchar(200),in sell_room_id varchar(16),in remark varchar(60),in productid int,in in_quantity int,in create_time datetime)
BEGIN

START TRANSACTION;

UPDATE t_order o , t_customer c
SET o.quantity = o.quantity + in_quantity
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id AND STATUS not in (0,2,3)
AND o.create_time > '2015-05-11';

set @update_count = (SELECT ROW_COUNT());
  -- SELECT @update_count;
  if @update_count = 0 THEN
        SET @Cid = (SELECT c.id from t_customer c JOIN user u
                                            ON c.seller_room_id = u.room_id
                                            WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id);
  -- SELECT @Cid;
  if @Cid is NULL THEN
      INSERT INTO t_customer(c_nickname,c_openid,seller_room_id,create_time)
          select nickname,c_open_id ,sell_room_id,create_time from t_weix_account_info
              where open_id = c_open_id;
      SELECT 1 isExistCustomer;
      end if;

            INSERT INTO t_order(product_id,c_id,status,quantity,create_time,exchange_rate,exchange_type)
                SELECT productid ,c.id,1,in_quantity,create_time,r.exchange_rate,r.exchange_type
                    FROM t_customer c JOIN user u
                    ON c.seller_room_id = u.room_id
                    JOIN t_exchange_rate r
                    ON r.exchange_type = 2
                    WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id
                        AND r.open_id = (SELECT open_id from user WHERE room_id = seller_room_id);
      end IF;
  commit;
  end; $$
  delimiter ;

-- 下单 pro_take_order_by_seller
delimiter $$
drop procedure if exists pro_take_order_by_seller;
CREATE  PROCEDURE pro_take_order_by_seller(in c_open_id varchar(200),in sell_room_id varchar(16),in order_remark varchar(60),in productid int,in in_quantity int,in create_time datetime,in in_cost int,in in_price int,out o_id int)
BEGIN

START TRANSACTION;

UPDATE t_order o , t_customer c
SET o.quantity = o.quantity + in_quantity
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id AND STATUS = 1
AND o.create_time > '2015-05-11';

set o_id = (select o.id from t_order o , t_customer c
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id AND STATUS = 1);

set @update_count = (SELECT ROW_COUNT());
  -- SELECT @update_count;
  if @update_count = 0 THEN
        SET @Cid = (SELECT c.id from t_customer c JOIN user u
                                            ON c.seller_room_id = u.room_id
                                            WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id);
  -- SELECT @Cid;
  if @Cid is NULL THEN
      INSERT INTO t_customer(c_nickname,c_openid,seller_room_id,create_time)
          select nickname,c_open_id ,sell_room_id,create_time from t_weix_account_info
              where open_id = c_open_id;
      SELECT 1 isExistCustomer;
      end if;

            INSERT INTO t_order(product_id,c_id,status,quantity,create_time,exchange_rate,exchange_type,cost,price,remark)
                SELECT productid ,c.id,1,in_quantity,create_time,r.exchange_rate,r.exchange_type,in_cost,in_price,order_remark
                    FROM t_customer c JOIN user u
                    ON c.seller_room_id = u.room_id
                    JOIN t_exchange_rate r
                    ON r.exchange_type = 2
                    WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id
                        AND r.open_id = (SELECT open_id from user WHERE room_id = seller_room_id);

            set o_id = (select LAST_INSERT_ID());
      end IF;
  commit;
  end; $$
  delimiter ;

------------bought tobuylist to getpaylist-------------start

delimiter $$
drop procedure if exists pro_bought;
CREATE  PROCEDURE pro_bought(in idStr varchar(200))
BEGIN

START TRANSACTION;
-- 预购列表 --> 已购列表
-- --相同p_id的订单取和，并删除status=1的订单
set @buyTime = now();
delete from t_serial;
call sp_print_result(idStr,',');
update t_order t0,
(select product_id,quantity,c_id from t_order o,t_serial s WHERE o.id = s.sid and o.status = 1) t1,
(select product_id,quantity,c_id from t_order o2 where o2.status = 2) t2
set t0.quantity = t1.quantity + t2.quantity,t0.buy_time = @buyTime
where t1.product_id = t2.product_id and t1.c_id = t2.c_id and t0.product_id = t2.product_id and t0.c_id = t2.c_id and t0.status = 2;

	-- ----删除
update t_order t0,
(select product_id,quantity,c_id from t_order o,t_serial s WHERE o.id = s.sid and o.status = 1) t1,
(select product_id,quantity,c_id from t_order o2 where o2.status = 2) t2
set t0.status = 0
where t1.product_id = t2.product_id and t1.c_id = t2.c_id and t0.product_id = t2.product_id and t0.c_id = t2.c_id and t0.status = 1;

update t_order t11,
(select t1.product_id,t1.quantity,t1.c_id from
	(select product_id,quantity,c_id from t_order o,t_serial s WHERE o.id = s.sid and o.status = 1) t1 left join
	(select product_id,quantity,c_id from t_order o2 where o2.status = 2) t2
	on t1.product_id = t2.product_id and t1.c_id = t2.c_id
	where t2.product_id is null)t12
set t11.status = 2,t11.buy_time = @buyTime
where t11.product_id = t12.product_id and t11.c_id = t12.c_id and t11.status = 1;

COMMIT;
end; $$
delimiter ;

------------bought tobuylist to getpaylist-------------end

-------------split string-------------
DELIMITER $$

drop function if exists func_get_split_string;
CREATE FUNCTION `func_get_split_string`(
f_string varchar(1000),f_delimiter varchar(5),f_order int) RETURNS varchar(255) CHARSET utf8
BEGIN
  -- Get the separated number of given string.
  declare result varchar(255) default '';
  set result = reverse(substring_index(reverse(substring_index(f_string,f_delimiter,f_order)),f_delimiter,1));
  return result;
END$$

DELIMITER ;
--------------

DELIMITER $$

drop function if exists func_get_split_string_total;
CREATE FUNCTION `func_get_split_string_total`(
f_string varchar(1000),f_delimiter varchar(5)
) RETURNS int(11)
BEGIN
  -- Get the total number of given string.
  return 1+(length(f_string) - length(replace(f_string,f_delimiter,'')));
END$$

DELIMITER ;

-------------

DELIMITER $$

drop PROCEDURE if exists sp_print_result;
CREATE PROCEDURE `sp_print_result`(
 IN f_string varchar(1000),IN f_delimiter varchar(5)
)
BEGIN
  -- Get the separated string.
  declare cnt int default 0;
  declare i int default 0;
  set cnt = func_get_split_string_total(f_string,f_delimiter);
  drop table if exists tmp_print;
  create temporary table tmp_print (num int not null);
  while i < cnt
  do
    set i = i + 1;
    insert into tmp_print(num) values (func_get_split_string(f_string,f_delimiter,i));
  end while;
  insert into t_serial select * from tmp_print;

END$$

DELIMITER ;

----------------------split string-----------------------


---------------------全站模糊匹配user------------------------start
delimiter $$
drop procedure if exists pro_vague_search_user;
create procedure pro_vague_search_user(in username varchar(50),in openId varchar(200),in type tinyint)
begin

start transaction;

if type = 1 then
 select distinct nickname from
 (
     select nickname from t_weix_account_info
     where nickname like username
     union all
     select c_nickname nickname from t_customer
     where c_nickname like username
 ) t;
elseif type = 3 then
    select distinct c.c_nickname nickname from t_customer c
        join user u
        where u.room_id = c.seller_room_id and u.open_id = openId and c.c_nickname like username;
else
select distinct c.c_nickname nickname from t_customer c
    join user u
    where u.room_id = c.seller_room_id and u.open_id = openId;

end if;

commit;

end; $$
delimiter ;
---------------------全站模糊匹配user------------------------end


---------------------商品编辑------------------------start
delimiter $$
drop procedure if exists pro_edit_product;
create procedure pro_edit_product(in roomid varchar(16),in openid varchar(100),in productid int,in title varchar(40),in text varchar(600),in image_url varchar(200))
begin

start transaction;
set @roomid = roomid;
if roomid is null then
set @roomid = (select room_id from user where open_id = openid);
end if;

update product p , user u set p.text = text,p.image_url = image_url,p.title = title
where p.room_id = u.room_id and p.room_id = @roomid and u.open_id = openid and p.id = productid;

commit;

end; $$
delimiter ;
---------------------商品编辑------------------------end

/***
select * from t_customer where c_nickname in
(select c_nickname from
(select c_nickname,count(1) count from
    (select c.c_nickname,c.c_openid
    from t_customer c left
    join t_weix_account_info w
    on c.c_nickname = w.nickname
    where w.nickname is null group by c.c_nickname,c.c_openid
    )t group by c_nickname
)t2 where count > 1 and c_nickname is not null);

select c.c_openid
   from t_customer c
   left join t_weix_account_info w
       on c.c_nickname = w.nickname
          where w.nickname is null and c.c_nickname is not null group by c.c_nickname,c.c_openid;

          ****/

/****************模糊匹配商品名***************/
delimiter $$
drop procedure if exists pro_vague_match_product;
CREATE  PROCEDURE pro_vague_match_product(in product_name varchar(50),in openId varchar(200))
begin


SELECT p.id,p.title product_name from product p
    join user u
    WHERE p.title LIKE product_name AND p.room_id = u.room_id and u.open_id = openId and p.status = 1;

end; $$
delimiter ;

/****************收账，账单详情***************/
delimiter $$
drop procedure if exists pro_getpayment;
CREATE  PROCEDURE pro_getpayment(in nickname varchar(50),in roomid varchar(16))
begin

SELECT c.id c_id,o.id oid,p.title,o.price,o.quantity,o.remark,c.seller_room_id room_id,o.mail_free,o.mail_pay,w.nickname
	from t_order o
	left JOIN t_customer c
	ON o.c_id = c.id AND o.`status` = 2 AND c.c_nickname = nickname AND c.seller_room_id = roomid
	left JOIN product p
	ON p.id = o.product_id
	left join t_weix_account_info w
	on c.c_openid = w.open_id
	where c.c_nickname = nickname AND c.seller_room_id = roomid;

end; $$
delimiter ;


delimiter $$
drop procedure if exists pro_weix_account_info_get_new;
CREATE PROCEDURE `pro_weix_account_info_get_new`(in openid varchar(200),in roomid varchar(20))
begin

if roomid is not null then
    SET @isHost = (SELECT count(*) from `user` WHERE open_id = openid and room_id = roomid) ;
     set @favCount = (select count(1) from favourite where room_id = roomid);
     if @isHost != 0 THEN
     SELECT w.nickname,w.headimgurl,w.sex,w.city,w.country,u.weixin weix_account,u.qrcode,u.introduce,@favCount favcount,1 ishost
      FROM t_weix_account_info w
      JOIN user u ON u.open_id = w.open_id
      where w.open_id = openid;
      ELSE
      SELECT w.nickname,w.headimgurl,w.sex,w.city,w.country,u.weixin weix_account,u.qrcode,u.introduce,@favCount favcount
      from user u
      JOIN t_weix_account_info w
      ON u.room_id = roomid and w.open_id = u.open_id;
      END IF;
else
     SELECT w.nickname,w.headimgurl,w.sex,w.city,w.country,u.weixin weix_account,u.qrcode,u.introduce,u.room_id
      FROM t_weix_account_info w
      JOIN user u ON u.open_id = w.open_id
      where w.open_id = openid;
  end if;

end; $$
delimiter ;