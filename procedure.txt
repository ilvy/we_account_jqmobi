delimiter $$
drop procedure if exists pro_weix_account_info;
CREATE PROCEDURE `pro_weix_account_info`(in openid varchar(200),in nickname varchar(50),in headimgurl varchar(150),in sex bit,in city varchar(30),in country varchar(30),in unionid varchar(200),in subscribe_time datetime,in _nickname_pinyin varchar(50))
BEGIN
  #Routine body goes here...

  start TRANSACTION;
  
  SET @hasWxAccount = (SELECT count(1) from t_weix_account_info where open_id = openid);
  if @hasWxAccount = 0 then
    INSERT INTO t_weix_account_info(open_id,nickname,headimgurl,sex,city,country,unionid,subscribe_time,nickname_pinyin)
      VALUES(openid,nickname,headimgurl,sex,city,country,unionid,subscribe_time,_nickname_pinyin);
  SELECT 1 res;
  ELSE
    UPDATE t_weix_account_info w SET w.nickname = nickname,w.headimgurl = headimgurl,w.sex = sex,
          w.city = city,w.country = country,w.unionid = unionid,w.subscribe_time=subscribe_time,w.nickname_pinyin = _nickname_pinyin
    WHERE w.open_id = openid;
  SELECT 2 res;
  END IF;

  COMMIT;
end; $$
delimiter ;
/****************end pro_weix_account_info*****************/TODO:nickname_pinyin

delimiter $$
drop procedure if exists pro_get_cut_info;
create procedure pro_get_cut_info(in id int)
begin 

select ci.res_u_name customer_name,ci.product_name,max(ci.price) price,ifnull(cld.cut_money,0) cut_money,ifnull(cut_count,0) cutCount,(activity_duration * 24 - TIMESTAMPDIFF(hour,ci.create_time,now())) remaind_hour,ci.product_img
    from t_cut_info ci 
    left join (select cut_id,count(1) cut_count,sum(cut_money) cut_money from t_cutlist_detail group by cut_id) cld
    on ci.id = cld.cut_id
    where ci.id = id and id is not null
    group by ci.req_u_id,ci.res_u_name,ci.product_name;

end; $$
delimiter ;

delimiter $$
drop procedure if exists pro_ready_help_cut;
create procedure pro_ready_help_cut(in cutId int,in openId varchar(100),in cutMoney int,in nickname varchar(60),in sex tinyint,in headimgurl varchar(100))
begin 

insert into t_cutlist_detail(cut_id,open_id,cut_money,nickname,sex,headimgurl) 
select cutId,openId,cutMoney,nickname,sex,headimgurl
from dual
where not exists(
select open_id from t_cutlist_detail where open_id = openId
) and openId is not null;

end; $$
delimiter ;


/**��һ��**/
delimiter $$
drop procedure if exists pro_help_cut;
create procedure pro_help_cut(in cutId int,in openId varchar(100),in cutMoney int)
begin 

start transaction;
set @alreadyCut = (select count(1) from t_cutlist_detail cld where cld.cut_id = cutId and cld.open_id = openId);
update t_cutlist_detail set cut_money = cutMoney 
where cut_id = cutId and open_id = openId and cut_money = 0;
select @alreadyCut alreadyCut ;
commit;

end; $$
delimiter ;


/**�����б�**/
delimiter $$
drop procedure if exists pro_get_cut_list;
create procedure pro_get_cut_list(in openId varchar(100))
begin 

start transaction;
select c.id cut_id,c.res_u_name customerName,c.product_name,c.price,c.status,product_img,date_format(c.create_time,'%Y-%m-%d %h:%m:%s') create_time,ifnull(cld.cut_money,0) cut_money,u.room_id
from t_cut_info c 
join user u 
on c.req_u_id = u.id 
left join (select cut_id,ifnull(sum(cut_money),0) cut_money from t_cutlist_detail group by cut_id)cld
on cld.cut_id = c.id
where u.open_id = openId;
commit;

end; $$



delimiter ;

/**�½�������Ϣ**/
delimiter $$
drop procedure if exists pro_create_cut_info;
create procedure pro_create_cut_info(in openId varchar(100),in username varchar(60),in product_name varchar(60),in price decimal(8,1),in create_time datetime,in product_img varchar(100),in activity_duration int)
begin 

start transaction;

insert into t_cut_info(req_u_id,res_u_name,product_name,price,create_time,product_img,activity_duration) 
select (select id from user where open_id = openId),username,product_name,price,create_time,product_img,activity_duration;
select LAST_INSERT_ID() cut_id;

commit;

end; $$
delimiter ;


/**��ע����Ϣ��**/
create table t_follow(id int auto_increment,open_id varchar(200),create_time datetime,status tinyint, primary key(id));

/**��ӹ�ע��**/
delimiter $$
drop procedure if exists pro_follow;
create procedure pro_follow(in openId varchar(200),in create_time datetime,in status tinyint)
begin 

insert into t_follow(open_id,create_time,status)
    select openId,create_time,status from dual
    where (select count(1) from t_follow where open_id = openId) = 0
    ;

end;$$
delimiter ;

/**ԭ��Ʒ�ӵ�**/
delimiter $$
drop procedure if exists pro_add_order_by_seller;
create procedure pro_add_order_by_seller(in cnickname varchar(50),in product_name varchar(40),in text varchar(600),in image_urls varchar(200),in sell_open_id varchar(200),in remark varchar(60),in productid int
,in in_quantity int,in cost int,in price int)
begin

start transaction;

set @now = now();
set @pname = product_name;
set @sell_room_id = (select room_id from user where open_id = sell_open_id);
set @openId = (select distinct open_id from t_weix_account_info where nickname = cnickname);-- 第一步、1先根据昵称获取买家openId
if @openId is null then
set @openId = (select distinct c_openid from t_customer where c_nickname = cnickname and seller_room_id = @sell_room_id);-- 第一步、2根据昵称从熟客获取买家openId
end if;
if @openId is null then -- add customer hasn't follow daidai
set @openId = (select concat('lopid_',unix_timestamp(@now),cast(rand() as char(10))));
insert into t_customer(c_openid,seller_room_id,c_nickname,create_time)
    select @openId,@sell_room_id,cnickname,@now;
end if;

if productid = -1 then
set @productId = (select max(id) from product where title = @pname and room_id = @sell_room_id and status = 1);
-- SELECT @roomid;
else
set @productId = productid;
end if;

if @productId is null then
insert into product(image_url,text,room_id,create_time,status,title) values(image_urls,text,@sell_room_id,@now,1,@pname);-- 第二步、发布商品
set @productId = (select last_insert_id());
call pro_take_order_by_seller(@openId,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,@oid);-- 第三步、下单
else
call pro_take_order_by_seller(@openId,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,@oid);-- 第三步、下单
end if;

select @productId product_id,@oid order_id,c.id c_id
from t_customer c
where c.c_nickname = cnickname and c.seller_room_id = @sell_room_id;

commit;

end; $$
delimiter ;

/**ԭ��Ʒ�ӵ�**/ TODO:nickname_pinyin
delimiter $$
drop procedure if exists pro_add_order_by_seller_new;
create procedure pro_add_order_by_seller_new(in cnickname varchar(50),in product_name varchar(40),in text varchar(600),in image_urls varchar(200),in sell_open_id varchar(200),in remark varchar(60),in productid int
,in in_quantity int,in cost decimal(10,2),in price decimal(10,2),in discount decimal(4,2),in cate_name varchar(50),in cnickname_pinyin varchar(50))
begin

start transaction;

set @now = now();
set @pname = product_name;
set @sell_room_id = (select room_id from user where open_id = sell_open_id);
set @openId = (select distinct open_id from t_weix_account_info where nickname = cnickname);-- 第一步、1先根据昵称获取买家openId
update t_customer c set c.c_status = 0 where c.c_openid = @openId and c.c_nickname != cnickname;-- TODO  添加修改时间
if @openId is null then
set @openId = (select distinct c_openid from t_customer where c_nickname = cnickname and seller_room_id = @sell_room_id and c_status = 1);-- 第一步、2根据昵称从熟客获取买家openId
end if;
if @openId is null then -- add customer hasn't follow daidai
set @openId = (select concat('lopid_',unix_timestamp(@now),cast(rand() as char(10))));
insert into t_customer(c_openid,seller_room_id,c_nickname,create_time,nickname_pinyin)
    select @openId,@sell_room_id,cnickname,@now,cnickname_pinyin;
end if;

if productid = -1 then
set @productId = (select max(id) from product where title = @pname and room_id = @sell_room_id and status = 1);
-- SELECT @roomid;
else
set @productId = productid;
end if;

if @productId is null then
insert into product(image_url,text,room_id,create_time,status,title) values(image_urls,text,@sell_room_id,@now,1,@pname);-- 第二步、发布商品
set @productId = (select last_insert_id());
call pro_take_order_by_seller_new(@openId,cnickname,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,discount,cate_name,@oid);-- 第三步、下单
else
call pro_take_order_by_seller_new(@openId,cnickname,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,discount,cate_name,@oid);-- 第三步、下单
end if;

select @productId product_id,@oid order_id,c.id c_id
from t_customer c
left join t_weix_account_info w
on c.c_openid = w.open_id
where (c.c_nickname = cnickname or w.nickname = cnickname) and c.seller_room_id = @sell_room_id and c.c_status = 1;

commit;

end; $$
delimiter ;

/************ test ***********/
delimiter $$
drop procedure if exists pro_add_order_by_seller_new_test;
create procedure pro_add_order_by_seller_new_test(in cnickname varchar(50),in product_name varchar(40),in text varchar(600),in image_urls varchar(200),in sell_open_id varchar(200),in remark varchar(60),in productid int
,in in_quantity int,in cost decimal(10,2),in price decimal(10,2),in discount decimal(4,2),in cate_name varchar(50),in cnickname_pinyin varchar(50))
begin

start transaction;

set @now = now();
set @pname = product_name;
set @sell_room_id = (select room_id from user where open_id = sell_open_id);
set @openId = (select distinct open_id from t_weix_account_info where nickname = cnickname);-- 第一步、1先根据昵称获取买家openId
update t_customer c set c.c_status = 0 where c.c_openid = @openId and c.c_nickname != cnickname;
if @openId is null then
set @openId = (select distinct c_openid from t_customer where c_nickname = cnickname and seller_room_id = @sell_room_id and c_status = 1);-- 第一步、2根据昵称从熟客获取买家openId
end if;
if @openId is null then -- add customer hasn't follow daidai
set @openId = (select concat('lopid_',unix_timestamp(@now),cast(rand() as char(10))));
insert into t_customer(c_openid,seller_room_id,c_nickname,create_time,nickname_pinyin)
    select @openId,@sell_room_id,cnickname,@now,cnickname_pinyin;
end if;

if productid = -1 then
set @productId = (select max(id) from product where title = @pname and room_id = @sell_room_id and status = 1);
-- SELECT @roomid;
else
set @productId = productid;
end if;

if @productId is null then
insert into product(image_url,text,room_id,create_time,status,title) values(image_urls,text,@sell_room_id,@now,1,@pname);-- 第二步、发布商品
set @productId = (select last_insert_id());
call pro_take_order_by_seller_new_test(@openId,cnickname,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,discount,cate_name,@oid);-- 第三步、下单
else
call pro_take_order_by_seller_new_test(@openId,cnickname,@sell_room_id,remark,@productId,in_quantity,@now,cost,price,discount,cate_name,@oid);-- 第三步、下单
end if;

select @productId product_id,@oid order_id,c.id c_id
from t_customer c
left join t_weix_account_info w
on c.c_openid = w.open_id
where (c.c_nickname = cnickname or w.nickname = cnickname) and c.seller_room_id = @sell_room_id and c.c_status = 1;

commit;

end; $$
delimiter ;
-------------------------------
delimiter $$
drop procedure if exists pro_take_order_by_seller_new_test;
-- CREATE  PROCEDURE pro_take_order_by_seller_new_test(in c_open_id varchar(200),in sell_room_id varchar(16),in order_remark varchar(60),in productid int,in in_quantity int,in create_time datetime,in in_cost int,in in_price int,out o_id int)
CREATE  PROCEDURE pro_take_order_by_seller_new_test(in c_open_id varchar(200),in customer_name varchar(50),in sell_room_id varchar(16),in order_remark varchar(60),in productid int,in in_quantity int,in create_time datetime,
                                           in in_cost decimal(10,2),in in_price decimal(10,2),in _discount decimal(4,2),in cate_name varchar(50),out o_id int)
BEGIN

START TRANSACTION;

-- 添加分类
call pro_add_category(1,cate_name,@cateId);

UPDATE t_order o , t_customer c
SET o.quantity = o.quantity + in_quantity
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id and o.remark = order_remark and o.cate_id = @cateId AND STATUS = 1
AND o.create_time > '2015-05-11';

set o_id = (select o.id from t_order o , t_customer c
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id and c.c_nickname = customer_name and o.remark = order_remark and o.cate_id = @cateId AND STATUS = 1);

set @update_count = (SELECT ROW_COUNT());
  -- SELECT @update_count;
  if @update_count = 0 THEN
        SET @Cid = (SELECT c.id from t_customer c JOIN user u -- t_customer 重复容易报错，根据openid和nickname分别排查
                                            ON c.seller_room_id = u.room_id
                                            WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id and c.c_nickname = customer_name and c.c_status = 1);
      -- SELECT @Cid;
        if @Cid is NULL THEN
        INSERT INTO t_customer(c_nickname,c_openid,seller_room_id,create_time,nickname_pinyin)
          select nickname,c_open_id ,sell_room_id,create_time,nickname_pinyin from t_weix_account_info
              where open_id = c_open_id;
      --  SELECT 1 isExistCustomer;
        end if;

            INSERT INTO t_order(product_id,c_id,status,quantity,create_time,exchange_rate,exchange_type,cost,price,remark,discount,cate_id)
                SELECT productid ,c.id,1,in_quantity,create_time,r.exchange_rate,r.exchange_type,case when in_cost = -1 then null else in_cost end,case when in_price = -1 then null else in_price end,order_remark,_discount,@cateId
                    FROM t_customer c JOIN user u
                    ON c.seller_room_id = u.room_id
                    JOIN t_exchange_rate r
                    ON r.exchange_type = 2
                    WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id and c.c_nickname = customer_name and c.c_status = 1
                        AND r.open_id = (SELECT open_id from user WHERE room_id = seller_room_id);

            set o_id = (select LAST_INSERT_ID());
      end IF;
  commit;
  end; $$
  delimiter ;

select max(id) from product where title = 'crisella 手表黑色表带' and room_id = 20066 and status = 1

select c.* from t_customer c
join t_weix_account_info w
on c.c_openid = w.open_id
where (c.c_nickname = '鷠皇Niklaus' or w.nickname = '鷠皇Niklaus') and c.seller_room_id = '888888';

/************* test end ***************/

/***************通过账单确认补全未关注的买家信息***************/ TODO:nickname_pinyin

delimiter $$
drop procedure if exists pro_integrate_customer_info;
create procedure pro_integrate_customer_info(in cnickname varchar(50),in roomid varchar(40),in c_open_id varchar(200),
in headimgurl varchar(150),in sex bit,in nickname varchar(50),in city varchar(30),in country varchar(30),in unionid varchar(200),in subscribe_time datetime)
begin

start transaction;

set @now = now();
if c_open_id is not null then -- is permit
    set @isSeller = (select count(1) from t_customer c
         join user u
         on u.room_id = c.seller_room_id and c.c_nickname = cnickname and c.seller_room_id = roomid and u.open_id = c_open_id);
    if @isSeller = 0 then    -- is this a seller,if not then
        set @isSubscribed = (select count(1) from t_weix_account_info w
                                 where w.open_id = c_open_id);
        set @isBind = (select count(1) from t_customer c
            join user u
            on u.room_id = c.seller_room_id and c.c_nickname = cnickname and c.seller_room_id = roomid and c.c_status = 1
            join t_weix_account_info w
            on w.open_id = c.c_openid);
        -- start fix the bug take one order but two --
        set @existCid = (select id from t_customer where c_openid = c_open_id and seller_room_id = roomid and c_status = 1);
        if @existCid is not null and @isBind = 0 then
            -- update t_customer set c_status = 0 where id =  @existCid;
            update t_order o,t_customer c set o.c_id = (select a.id from (select id from t_customer where c_nickname = cnickname and seller_room_id = roomid and c_status = 1 and id != @existCid) a),c.c_status = 0
            where o.c_id = c.id and c.id = @existCid;
        end if;
        -- end fix the bug take one order but two --
        if @isBind = 0 and @isSubscribed >= 1 then
            update t_customer set c_openid =  c_open_id where c_nickname = cnickname and seller_room_id = roomid;
        elseif @isBind = 0 and @isSubscribed = 0 then
            call pro_weix_account_info(c_open_id,nickname,headimgurl,sex,city,country,unionid,@now);
            update t_customer set c_openid =  c_open_id where c_nickname = cnickname and seller_room_id = roomid;
        end if;
    end if;
end if;
commit;

end; $$
delimiter ;


-- 下单 pro_take_order
delimiter $$
drop procedure if exists pro_take_order;
CREATE  PROCEDURE pro_take_order(in c_open_id varchar(200),in sell_room_id varchar(16),in remark varchar(60),in productid int,in in_quantity int,in create_time datetime)
BEGIN

START TRANSACTION;

UPDATE t_order o , t_customer c
SET o.quantity = o.quantity + in_quantity
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id AND STATUS not in (0,2,3)
AND o.create_time > '2015-05-11';

set @update_count = (SELECT ROW_COUNT());
  -- SELECT @update_count;
  if @update_count = 0 THEN
        SET @Cid = (SELECT c.id from t_customer c JOIN user u
                                            ON c.seller_room_id = u.room_id
                                            WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id and c.c_status = 1);
  -- SELECT @Cid;
  if @Cid is NULL THEN
      INSERT INTO t_customer(c_nickname,c_openid,seller_room_id,create_time,nickname_pinyin)
          select nickname,c_open_id ,sell_room_id,create_time,nickname_pinyin from t_weix_account_info
              where open_id = c_open_id;
      SELECT 1 isExistCustomer;
      end if;

            INSERT INTO t_order(product_id,c_id,status,quantity,create_time,exchange_rate,exchange_type)
                SELECT productid ,c.id,1,in_quantity,create_time,r.exchange_rate,r.exchange_type
                    FROM t_customer c JOIN user u
                    ON c.seller_room_id = u.room_id
                    JOIN t_exchange_rate r
                    ON r.exchange_type = 2
                    WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id
                        AND r.open_id = (SELECT open_id from user WHERE room_id = seller_room_id);
      end IF;
  commit;
  end; $$
  delimiter ;

-- 下单 pro_take_order_by_seller
delimiter $$
drop procedure if exists pro_take_order_by_seller_new;
-- CREATE  PROCEDURE pro_take_order_by_seller(in c_open_id varchar(200),in sell_room_id varchar(16),in order_remark varchar(60),in productid int,in in_quantity int,in create_time datetime,in in_cost int,in in_price int,out o_id int)
CREATE  PROCEDURE pro_take_order_by_seller_new(in c_open_id varchar(200),in customer_name varchar(50),in sell_room_id varchar(16),in order_remark varchar(60),in productid int,in in_quantity int,in create_time datetime,
                                           in in_cost decimal(10,2),in in_price decimal(10,2),in _discount decimal(4,2),in cate_name varchar(50),out o_id int)
BEGIN

START TRANSACTION;

UPDATE t_order o , t_customer c
SET o.quantity = o.quantity + in_quantity
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id AND STATUS = 1
AND o.create_time > '2015-05-11';

set o_id = (select o.id from t_order o , t_customer c
where o.c_id = c.id AND o.product_id = productid AND c.c_openid = c_open_id  AND c.seller_room_id = sell_room_id and c.c_nickname = customer_name AND STATUS = 1);

set @update_count = (SELECT ROW_COUNT());
  -- SELECT @update_count;
  if @update_count = 0 THEN
        SET @Cid = (SELECT c.id from t_customer c JOIN user u -- t_customer 重复容易报错，根据openid和nickname分别排查
                                            ON c.seller_room_id = u.room_id
                                            WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id and c.c_nickname = customer_name and c.c_status = 1);
      -- SELECT @Cid;
        if @Cid is NULL THEN
        INSERT INTO t_customer(c_nickname,c_openid,seller_room_id,create_time,nickname_pinyin)
          select nickname,c_open_id ,sell_room_id,create_time,nickname_pinyin from t_weix_account_info
              where open_id = c_open_id;
      --  SELECT 1 isExistCustomer;
        end if;

      -- 添加分类
       call pro_add_category(1,cate_name,@cateId);

            INSERT INTO t_order(product_id,c_id,status,quantity,create_time,exchange_rate,exchange_type,cost,price,remark,discount,cate_id)
                SELECT productid ,c.id,1,in_quantity,create_time,r.exchange_rate,r.exchange_type,case when in_cost = -1 then null else in_cost end,case when in_price = -1 then null else in_price end,order_remark,_discount,@cateId
                    FROM t_customer c JOIN user u
                    ON c.seller_room_id = u.room_id
                    JOIN t_exchange_rate r
                    ON r.exchange_type = 2
                    WHERE c.seller_room_id = sell_room_id AND c.c_openid = c_open_id and c.c_nickname = customer_name and c.c_status = 1
                        AND r.open_id = (SELECT open_id from user WHERE room_id = seller_room_id);

            set o_id = (select LAST_INSERT_ID());
      end IF;
  commit;
  end; $$
  delimiter ;

 call pro_add_order_by_seller_new('cassie','quchengshiyagao','','','oxfQVswUSy2KXBPOjNi_BqdNI3aA','','-1','1','-1','-1',1,'hkwalmart')
------------bought tobuylist to getpaylist-------------start

delimiter $$
drop procedure if exists pro_bought;
CREATE  PROCEDURE pro_bought(in idStr varchar(200))
BEGIN

START TRANSACTION;
-- 预购列表 --> 已购列表
-- --相同p_id的订单取和，并删除status=1的订单
set @buyTime = now();
delete from t_serial;
call sp_print_result(idStr,',');
update t_order t0,
(select product_id,quantity,c_id from t_order o,t_serial s WHERE o.id = s.sid and o.status = 1) t1,
(select product_id,quantity,c_id from t_order o2 where o2.status = 2) t2
set t0.quantity = t1.quantity + t2.quantity,t0.buy_time = @buyTime
where t1.product_id = t2.product_id and t1.c_id = t2.c_id and t0.product_id = t2.product_id and t0.c_id = t2.c_id and t0.status = 2;

	-- ----删除
update t_order t0,
(select product_id,quantity,c_id from t_order o,t_serial s WHERE o.id = s.sid and o.status = 1) t1,
(select product_id,quantity,c_id from t_order o2 where o2.status = 2) t2
set t0.status = 0
where t1.product_id = t2.product_id and t1.c_id = t2.c_id and t0.product_id = t2.product_id and t0.c_id = t2.c_id and t0.status = 1;

update t_order t11,
(select t1.product_id,t1.quantity,t1.c_id from
	(select product_id,quantity,c_id from t_order o,t_serial s WHERE o.id = s.sid and o.status = 1) t1 left join
	(select product_id,quantity,c_id from t_order o2 where o2.status = 2) t2
	on t1.product_id = t2.product_id and t1.c_id = t2.c_id
	where t2.product_id is null)t12
set t11.status = 2,t11.buy_time = @buyTime
where t11.product_id = t12.product_id and t11.c_id = t12.c_id and t11.status = 1;

COMMIT;
end; $$
delimiter ;

------------bought tobuylist to getpaylist-------------end

-------------split string-------------
DELIMITER $$

drop function if exists func_get_split_string;
CREATE FUNCTION `func_get_split_string`(
f_string varchar(1000),f_delimiter varchar(5),f_order int) RETURNS varchar(255) CHARSET utf8
BEGIN
  -- Get the separated number of given string.
  declare result varchar(255) default '';
  set result = reverse(substring_index(reverse(substring_index(f_string,f_delimiter,f_order)),f_delimiter,1));
  return result;
END$$

DELIMITER ;
--------------

DELIMITER $$

drop function if exists func_get_split_string_total;
CREATE FUNCTION `func_get_split_string_total`(
f_string varchar(1000),f_delimiter varchar(5)
) RETURNS int(11)
BEGIN
  -- Get the total number of given string.
  return 1+(length(f_string) - length(replace(f_string,f_delimiter,'')));
END$$

DELIMITER ;

-------------

DELIMITER $$

drop PROCEDURE if exists sp_print_result;
CREATE PROCEDURE `sp_print_result`(
 IN f_string varchar(1000),IN f_delimiter varchar(5)
)
BEGIN
  -- Get the separated string.
  declare cnt int default 0;
  declare i int default 0;
  set cnt = func_get_split_string_total(f_string,f_delimiter);
  drop table if exists tmp_print;
  create temporary table tmp_print (num int not null);
  while i < cnt
  do
    set i = i + 1;
    insert into tmp_print(num) values (func_get_split_string(f_string,f_delimiter,i));
  end while;
  insert into t_serial select * from tmp_print;

END$$

DELIMITER ;

----------------------split string-----------------------

-------------------------发货----------------------------------
    ---------发货标记 t_s_serial 序列临时表---------
DELIMITER $$

drop PROCEDURE if exists sp_gene_s_serial;
CREATE PROCEDURE `sp_gene_s_serial`(
 IN f_string varchar(1000),IN f_delimiter varchar(5)
)
BEGIN
  -- Get the separated string.
  declare cnt int default 0;
  declare i int default 0;
  set cnt = func_get_split_string_total(f_string,f_delimiter);
  drop table if exists tmp_print;
  create temporary table tmp_print (num int not null);
  while i < cnt
  do
    set i = i + 1;
    insert into tmp_print(num) values (func_get_split_string(f_string,f_delimiter,i));
  end while;
  insert into t_s_serial select * from tmp_print;

END$$

DELIMITER ;

    ------发货标记 t_s_serial 序列临时表 end----
    ----------发货脚本 start---------
delimiter $$
drop procedure if exists pro_sendoff;
CREATE  PROCEDURE pro_sendoff(in idStr varchar(200),in openid varchar(100), in status tinyint)
BEGIN

START TRANSACTION;
delete from t_s_serial;
call sp_gene_s_serial(idStr,',');
update t_order o
    join t_s_serial s
    on o.id = s.sid and (o.status = 1 or o.status = 2)
    join product p
    on o.product_id = p.id
    join user u
    on p.room_id = u.room_id
    set o.sendoff=status
    where u.open_id = openid;

COMMIT;
end; $$
delimiter ;
    ----------发货脚本 end--------
-----------------------------发货------------------------


---------------------全站模糊匹配user------------------------start
delimiter $$
drop procedure if exists pro_vague_search_user;
create procedure pro_vague_search_user(in username varchar(50),in openId varchar(200),in type tinyint)
begin

start transaction;

if type = 1 then
 select distinct nickname from
 (
     select nickname from t_weix_account_info
     where nickname_pinyin like username
     union all
     select c_nickname nickname from t_customer
     where nickname_pinyin like username and c_status = 1
 ) t;
elseif type = 3 then
    select distinct c.c_nickname nickname from t_customer c
        join user u
        where u.room_id = c.seller_room_id and u.open_id = openId and c.nickname_pinyin like username and c.c_status = 1;
else
select distinct c.c_nickname nickname from t_customer c
    join user u
    where u.room_id = c.seller_room_id and u.open_id = openId and c.c_status = 1;

end if;

commit;

end; $$
delimiter ;
---------------------全站模糊匹配user------------------------end


---------------------商品编辑 更新同名商品合并------------------------start
delimiter $$
drop procedure if exists pro_edit_product;
create procedure pro_edit_product(in roomid varchar(16),in openid varchar(100),in productid int,in _title varchar(40),in text varchar(600),in image_url varchar(200))
begin

start transaction;
set @roomid = roomid;
if roomid is null then
set @roomid = (select room_id from user where open_id = openid);
end if;

set @existProductId = (select p.id from product p where p.title = _title and p.room_id = @roomid and p.status = 1 and p.id != productid limit 1);
if @existProductId is null then
update product p , user u set p.text = text,p.image_url = image_url,p.title = _title
where p.room_id = u.room_id and p.room_id = @roomid and u.open_id = openid and p.id = productid;
select -1 existpid;
else
update product p set p.status = 0 where p.id = productid; -- disable repeat product
update t_order o set o.product_id = @existProductId where o.product_id = productid; -- update order's product_id to existed one
select @existProductId existpid;
end if;

commit;

end; $$
delimiter ;
---------------------商品编辑------------------------end

/***
select * from t_customer where c_nickname in
(select c_nickname from
(select c_nickname,count(1) count from
    (select c.c_nickname,c.c_openid
    from t_customer c left
    join t_weix_account_info w
    on c.c_nickname = w.nickname
    where w.nickname is null group by c.c_nickname,c.c_openid
    )t group by c_nickname
)t2 where count > 1 and c_nickname is not null);

select c.c_openid
   from t_customer c
   left join t_weix_account_info w
       on c.c_nickname = w.nickname
          where w.nickname is null and c.c_nickname is not null group by c.c_nickname,c.c_openid;

          ****/

/****************模糊匹配商品名***************/
delimiter $$
drop procedure if exists pro_vague_match_product;
CREATE  PROCEDURE pro_vague_match_product(in product_name varchar(50),in openId varchar(200))
begin


SELECT p.id,p.title product_name from product p
    join user u
    WHERE p.title LIKE product_name AND p.room_id = u.room_id and u.open_id = openId and p.status = 1;

end; $$
delimiter ;

/****************收账，账单详情***************/
delimiter $$
drop procedure if exists pro_getpayment;
CREATE  PROCEDURE pro_getpayment(in _nickname varchar(50),in roomid varchar(16))
begin

SELECT c.id c_id,o.id oid,p.title,o.price,o.quantity,o.remark,c.seller_room_id room_id,o.mail_free,o.mail_pay,w.nickname,c.c_openid
	from t_order o
	left JOIN t_customer c
	ON o.c_id = c.id AND o.`status` = 2 AND c.c_nickname = _nickname AND c.seller_room_id = roomid
	left JOIN product p
	ON p.id = o.product_id
	left join t_weix_account_info w
	on c.c_openid = w.open_id
	where c.c_nickname = _nickname AND c.seller_room_id = roomid;

end; $$
delimiter ;

/********************获取当前用户信息***********************/

delimiter $$
drop procedure if exists pro_weix_account_info_get_new;
CREATE PROCEDURE `pro_weix_account_info_get_new`(in openid varchar(200),in roomid varchar(20))
begin

if roomid is not null then
    SET @isHost = (SELECT count(*) from `user` WHERE open_id = openid and room_id = roomid) ;
     set @favCount = (select count(1) from favourite where room_id = roomid);
     if @isHost != 0 THEN
     SELECT w.nickname,w.headimgurl,w.sex,w.city,w.country,u.weixin weix_account,u.qrcode,u.introduce,@favCount favcount,1 ishost
      FROM t_weix_account_info w
      JOIN user u ON u.open_id = w.open_id
      where w.open_id = openid;
      ELSE
      SELECT w.nickname,w.headimgurl,w.sex,w.city,w.country,u.weixin weix_account,u.qrcode,u.introduce,@favCount favcount
      from user u
      JOIN t_weix_account_info w
      ON u.room_id = roomid and w.open_id = u.open_id;
      END IF;
else
     SELECT w.nickname,w.headimgurl,w.sex,w.city,w.country,u.weixin weix_account,u.qrcode,u.introduce,u.room_id
      FROM t_weix_account_info w
      JOIN user u ON u.open_id = w.open_id
      where w.open_id = openid;
  end if;

end; $$
delimiter ;

/**********************修改order info************************/
    /**备注等等**/
delimiter $$
drop procedure if exists pro_update_order_info;
CREATE PROCEDURE `pro_update_order_info`(in openid varchar(200),in order_remark varchar(200),in order_id int)
begin

set @isExist = (select count(1) from
    (select id,product_id from t_order o where o.id = order_id)o
    ,product p
    ,user u
    where o.product_id = p.id and p.room_id = u.room_id and u.open_id = openid );
if @isExist = 1 then
update t_order set remark = order_remark where id = order_id;
select 1 result;
else
select 0 result;
end if;

end; $$
delimiter ;


/********** pro_set_customer_info ************/
delimiter $$
drop procedure if exists pro_set_customer_info;
CREATE PROCEDURE `pro_set_customer_info`(in objid int,in value decimal(10,2),in nickname varchar(50),in type tinyint,in exchangeRate decimal(4,2),in openId varchar(100),in exchangeType tinyint,in _discount decimal(4,2))
BEGIN
	#Routine body goes here...
START TRANSACTION;

if type = 1 THEN
-- UPDATE t_customer c SET c.c_nickname = nickname
  -- WHERE c.id = objid;
  set @objExistCid = (select c.id from t_customer c
                       join user u
                       where c.c_nickname = nickname and c.c_status = 1 and c.id != objid and c.seller_room_id = u.room_id and u.open_id = openId);

  -- 1、当前用户昵称不存在
  if @objExistCid is null then
   UPDATE t_customer c SET c.c_nickname = nickname
     WHERE c.id = objid and c.c_status = 1;
  -- 2、当前客户昵称已存在
  else
  set @isBillChecked = (select count(1) from t_customer c
                       join user u
                       where c.id = @objExistCid and c.c_status = 1 and c.c_openid not like '%lopid_%');
     -- 2.1当前客户昵称已经确认过账单
     if @isBillChecked > 0 then
          UPDATE t_customer c SET c.c_status = 0
            WHERE c.id = objid and c.c_status = 1;
          update t_order o set o.c_id = @objExistCid
            where o.c_id = objid;
     -- 2.2当前客户昵称未确认过账单
     elseif @isBillChecked = 0 then
          UPDATE t_customer c SET c.c_nickname = nickname
            WHERE c.id = objid and c.c_status = 1;
          update t_customer c,user u set c.c_status = 0
            where c.id = @objExistCid and c.c_status = 1;
          update t_order o set o.c_id = objid
            where o.c_id = @objExistCid;
     end if;
   end if;
ELSEIF type = 2 THEN
  UPDATE t_order o SET o.cost = value,o.exchange_rate = exchangeRate ,o.exchange_type = exchangeType
    WHERE o.id = objid;
  UPDATE t_order o SET o.exchange_rate = exchangeRate ,o.exchange_type = exchangeType
    WHERE o.cost IS NULL AND o.product_id in
        (SELECT p.id FROM product p,`user` u where p.room_id = u.room_id AND u.open_id = openId and p.status = 1);
  UPDATE t_exchange_rate er set er.exchange_rate = exchangeRate
    WHERE er.exchange_type = exchangeType AND er.open_id = openId;
  ELSEif type = 3 THEN
    UPDATE t_order o SET o.price = value,o.discount = _discount
        WHERE o.id = objid;
  ELSEIF type = 4 THEN
    UPDATE t_order o SET o.quantity = value
      WHERE o.id = objid;
end if;

commit;
end; $$
delimiter ;

/********** pro_set_customer_info_new ************/ 修复修改昵称时修改所有订单的逻辑错误，加上oid一起判断
delimiter $$
drop procedure if exists pro_set_customer_info_new;
-- call pro_set_customer_info_new('1215',0,'冀秋萍','1','','oxfQVs-1vSNl4xe8NmM02GPr8Q2w','','','4604','jiqiuping')
CREATE PROCEDURE `pro_set_customer_info_new`(in objid int,in value decimal(10,2),in nickname varchar(50),in type tinyint,in exchangeRate decimal(4,2),in openId varchar(100),in exchangeType tinyint,in _discount decimal(4,2),in order_id int,in _nickname_pinyin varchar(50))
BEGIN
	#Routine body goes here...
START TRANSACTION;

set @now = now();

if type = 1 THEN
-- UPDATE t_customer c SET c.c_nickname = nickname
  -- WHERE c.id = objid;
  set @objExistCid = (select c.id from t_customer c
                       join user u
                       where c.c_nickname = nickname and c.c_status = 1 and c.id != objid and c.seller_room_id = u.room_id and u.open_id = openId);
  set @sell_room_id = (select room_id from user u where u.open_id = openId);
  set @isTheSamePerson = (select c.id from t_customer c where c.id = objid and c.c_nickname = nickname);

  -- 1、当前用户昵称不存在
  if @objExistCid is null and @sell_room_id is not null and @isTheSamePerson is null then
   -- UPDATE t_customer c SET c.c_nickname = nickname
    -- WHERE c.id = objid and c.c_status = 1;
     set @lopenId = (select concat('lopid_',unix_timestamp(@now),cast(rand() as char(10))));
     insert into t_customer(c_openid,seller_room_id,c_nickname,create_time,nickname_pinyin)
         select @lopenId,@sell_room_id,nickname,@now,_nickname_pinyin;
         set @objExistCid = (select last_insert_id());
      update t_order o set o.c_id = @objExistCid
        where o.c_id = objid and o.id = order_id;
        select @objExistCid newCid;
  -- 2、当前客户昵称已存在
  elseif @objExistCid is not null and @isTheSamePerson is null then
      update t_order o set o.c_id = @objExistCid
        where o.c_id = objid and o.id = order_id;
      select @objExistCid newCid;
   end if;
ELSEIF type = 2 THEN
  UPDATE t_order o SET o.cost = value,o.exchange_rate = exchangeRate ,o.exchange_type = exchangeType
    WHERE o.id = objid;
  -- UPDATE t_order o SET o.exchange_rate = exchangeRate ,o.exchange_type = exchangeType
    -- WHERE o.cost IS NULL AND o.product_id in
        -- (SELECT p.id FROM product p,`user` u where p.room_id = u.room_id AND u.open_id = openId and p.status = 1);
  UPDATE t_order o,(SELECT p.id FROM product p,`user` u where p.room_id = u.room_id AND u.open_id = openId and p.status = 1) p
   SET o.exchange_rate = exchangeRate ,o.exchange_type = exchangeType
    WHERE o.cost IS NULL AND o.product_id = p.id;
  UPDATE t_exchange_rate er set er.exchange_rate = exchangeRate
    WHERE er.exchange_type = exchangeType AND er.open_id = openId;
  ELSEif type = 3 THEN
    UPDATE t_order o SET o.price = value,o.discount = _discount
        WHERE o.id = objid;
  ELSEIF type = 4 THEN
    UPDATE t_order o SET o.quantity = value
      WHERE o.id = objid;
end if;

commit;
end; $$
delimiter ;

/****************pro_get_order_info******************/
delimiter $$
drop procedure if exists pro_get_order_info_new;
CREATE PROCEDURE `pro_get_order_info_new`(in openid varchar(100),in order_status tinyint)
BEGIN
	#Routine body goes here...
START TRANSACTION;

if order_status != 2 then
  SELECT c.id cid,o.id oid,p.id product_id,p.title product_name,c.c_nickname nickname,o.quantity,o.`status`,
      o.remark,o.cost unit_cost,o.price unit_price,o.mail_free,o.mail_pay,c.seller_room_id room_id,o.exchange_rate,o.discount,o.cate_id,ca.cate_name,o.sendoff
  from t_customer c
      JOIN `user` u1
    ON c.seller_room_id = u1.room_id and c.c_status = 1
      JOIN t_order o
    on c.id = o.c_id
      JOIN product p
    ON o.product_id = p.id
      JOIN t_category ca
    on o.cate_id = ca.id
    WHERE o.`status` = order_status AND u1.open_id = openid and c.c_status = 1
    ORDER BY ca.cate_name,p.title,c.c_nickname ASC;
else
  SELECT c.id cid,o.id oid,p.id product_id,p.title product_name,c.c_nickname nickname,o.quantity,o.`status`,
      o.remark,o.cost unit_cost,o.price unit_price,o.mail_free,o.mail_pay,c.seller_room_id room_id,o.exchange_rate,o.discount,o.cate_id,ca.cate_name,o.sendoff
  from t_customer c
      JOIN `user` u1
    ON c.seller_room_id = u1.room_id and c.c_status = 1
      JOIN t_order o
    on c.id = o.c_id
      JOIN product p
    ON o.product_id = p.id
      JOIN t_category ca
    on o.cate_id = ca.id
    WHERE o.`status` = order_status AND u1.open_id = openid and c.c_status = 1
    ORDER BY trim(c.nickname_pinyin) ASC;
end if;

commit;
end; $$
delimiter ;


/*************** pro_get_final_bill ***************/
delimiter $$
drop procedure if exists pro_get_final_bill;
CREATE PROCEDURE `pro_get_final_bill`(in openid varchar(100),in nickname varchar(50),in date1 datetime,in date2 datetime)
BEGIN
	#Routine body goes here...
START TRANSACTION;

SELECT c.id cid,o.id oid,p.title product_name,c.c_nickname nickname,o.cost unit_cost,o.price unit_price,o.quantity,o.`status`,o.remark,o.mail_free,o.mail_pay,o.buy_time,o.exchange_rate
	from t_customer c
	  JOIN `user` u1
	ON c.seller_room_id = u1.room_id AND c.c_status = 1 and (c.c_nickname = nickname OR nickname = '')
	  JOIN t_order o
	on c.id = o.c_id AND DATE_FORMAT(o.buy_time,'%Y-%m-%d') >= date1 and DATE_FORMAT(o.buy_time,'%Y-%m-%d') <= date2
	  JOIN product p
	ON o.product_id = p.id
	WHERE o.`status` = 3 AND u1.open_id = openid AND c.c_status = 1
  order by o.buy_time asc;

commit;
end; $$
delimiter ;


/************* pro_register **************/
delimiter $$
drop procedure if exists pro_register;
CREATE PROCEDURE `pro_register`(in openId varchar(200),in user_name varchar(200),in email varchar(50),in pwd varchar(100),in weixin varchar(30))
BEGIN
	#Routine body goes here...
START TRANSACTION;

set @isExist = (select count(1) from user where open_id = openId);
if @isExist > 0 then
select @isExist isExist;
else
set @roomid = (select room_id from room where status = 0 and special_type = 0 limit 1);
set @now = now();
insert into user(open_id,user_name,email,pwd,room_id,nickname,weixin,create_time,status) values(openId,user_name,email,pwd,@roomid,nickname,weixin,@now,1);
UPDATE room set status = 1 where room_id = @roomid;
CALL pro_create_seller_exchange(openId);
select 0 isExist,@roomid room_id;
end if;

commit;
end; $$
delimiter ;

/*************** pro_budget 预算***************/
delimiter $$
drop procedure if exists pro_budget;
CREATE PROCEDURE `pro_budget`(in openid varchar(100))
BEGIN
	#Routine body goes here...
START TRANSACTION;

SELECT c.id cid,o.id oid,p.title product_name,c.c_nickname nickname,o.cost unit_cost,o.price unit_price,o.quantity,o.`status`,o.remark,o.mail_free,o.mail_pay,o.buy_time,o.exchange_rate,o.discount
	from t_customer c
	  JOIN `user` u1
	ON c.seller_room_id = u1.room_id AND c.c_status = 1 AND u1.open_id = openid
	  JOIN t_order o
	on c.id = o.c_id and o.`status` = 1
	  JOIN product p
	ON o.product_id = p.id
	WHERE o.`status` = 1 AND u1.open_id = openid AND c.c_status = 1;

commit;
end; $$
delimiter ;

/************* 模糊匹配分类信息 **************/
delimiter $$
drop procedure if exists pro_vague_search_category;
CREATE PROCEDURE `pro_vague_search_category`(in cate varchar(100))
BEGIN
	#Routine body goes here...
START TRANSACTION;

select id,cate_name from t_category where cate_name like cate;

commit;
end; $$
delimiter ;

/****************** 添加分类 ******************/
delimiter $$
drop procedure if exists pro_add_category;
create procedure pro_add_category(in cateType tinyint,in cateName varchar(50),out cate_id int)
begin

start transaction;

if cateName is null then
set cate_id = 1;
else
    set @cateId = (select min(id) from t_category where cate_name = cateName);
    if @cateId is null then
        insert into t_category(cate_type,cate_name)
          select cateType,cateName;
        set cate_id = (select last_insert_id());
    else
        set cate_id = @cateId;
    end if;
end if;

commit;

end; $$
delimiter ;

/************** pro_change_category 订单更改分类**************/
delimiter $$
drop procedure if exists pro_change_category;
create procedure pro_change_category(in oids varchar(500),in cateName varchar(50))
begin

start transaction;

call sp_print_result(oids,cateName);
call pro_add_category(1,cateName,@newCateId);
update t_order o set o.cate_id = @newCateId
  where o.id in (select num from tmp_print);

commit;

end; $$
delimiter ;

/************** pro_change_category 订单更改分类 动态sql实现**************/
delimiter $$
drop procedure if exists pro_change_category;
create procedure pro_change_category(in oids varchar(500),in cateName varchar(50))
begin

start transaction;

call pro_add_category(1,cateName,@newCateId);
set @sql = concat('update t_order o set o.cate_id = ',@newCateId,' where o.id in (',oids,');');
-- select @sql;
prepare stmt from @sql;
execute stmt;

commit;

end; $$
delimiter ;

/************** pro_login 账号密码登录 **************/
delimiter $$
drop procedure if exists pro_login;
create procedure pro_login(in accountName varchar(50),in _pwd varchar(50))
begin

start transaction;

select u.open_id from user u where u.pwd = _pwd and (u.email = accountName or u.user_name = accountName or u.room_id = accountName);

commit;

end; $$
delimiter ;

/************** pro_verify_email 验证注册邮箱是否匹配room_id **************/
delimiter $$
drop procedure if exists pro_verify_email;
create procedure pro_verify_email(in _room_id varchar(50),in _email varchar(50))
begin

start transaction;

select u.open_id,u.room_id from user u where u.email = _email and u.room_id = _room_id;

commit;

end; $$
delimiter ;

/************** pro_reset_pwd 修改密码 **************/
delimiter $$
drop procedure if exists pro_reset_pwd;
create procedure pro_reset_pwd(in _room_id varchar(50),in _pwd varchar(50))
begin

start transaction;

update user u set u.pwd = _pwd where room_id = _room_id;

commit;

end; $$
delimiter ;

/************** category table **************/
create table t_category(id int primary key auto_increment,cate_type tinyint default 1,cate_name varchar(50));


/************** pro_check_user_email 验证注册邮箱是否已经注册过 **************/
delimiter $$
drop procedure if exists pro_check_user_email;
create procedure pro_check_user_email(in _email varchar(50))
begin

start transaction;

select u.open_id from user u where u.email = _email and u.status = 1;

commit;

end; $$
delimiter ;

/************** pro_bind_account 绑定微信账号和普通账号 **************/
delimiter $$
drop procedure if exists pro_bind_account;
create procedure pro_bind_account(in _openId varchar(100),in _email varchar(50))
begin

start transaction;

update t_exchange_rate er,user u set er.open_id = _openId where u.open_id = er.open_id and u.email = _email and u.open_id like '%lopid_%';
update user u set u.open_id = _openId where u.email = _email and u.open_id like '%lopid_%';

commit;

end; $$
delimiter ;

/************** pro_reset_pwd 修改密码 **************/
delimiter $$
drop procedure if exists pro_reset_pwd;
create procedure pro_reset_pwd(in _room_id varchar(50),in _pwd varchar(50))
begin

start transaction;

update user u set u.pwd = _pwd where room_id = _room_id;

commit;

end; $$
delimiter ;

/************** pro_get_user_info 获取用户基本信息 **************/
delimiter $$
drop procedure if exists pro_get_user_info;
create procedure pro_get_user_info(in openId varchar(100))
begin

start transaction;

select u.room_id,w.nickname from user u , t_weix_account_info w where u.open_id = w.open_id and u.open_id = openId;

commit;

end; $$
delimiter ;


update t_customer t1,(select c.id from t_customer c left join (select c_openid,seller_room_id,count(1) num from t_customer where c_status = 1 group by c_openid,seller_room_id) c2
 on c.c_openid = c2.c_openid and c.seller_room_id = c2.seller_room_id and c2.num > 1 and c_status = 1 and c.seller_room_id != '888888'
left join (select max(id) id from t_customer c,(select c_openid,seller_room_id,count(1) num from t_customer where c_status = 1 group by c_openid,seller_room_id) c2
 where c.c_openid = c2.c_openid and c.seller_room_id = c2.seller_room_id and c2.num > 1 and c_status = 1 and c.seller_room_id != '888888'
 group by c.c_openid,c.seller_room_id) c3
 on c3.id = c.id
 where c3.id is null and c2.num > 1) t2
 set t1.c_status = 0
where t1.id = t2.id

select * from t_customer c,(select c_openid,seller_room_id,count(1) num from t_customer group by c_openid,seller_room_id) c2
 where c.c_openid = c2.c_openid and c.seller_room_id = c2.seller_room_id and c2.num > 1 and c.seller_room_id != '888888'
 order by c_openid,seller_room_id

 c_status = 1